{"version":3,"sources":["../src/lib/methods.mjs","../src/lib/util.ts","../src/client.ts"],"sourcesContent":["export const METHODS = {\r\n  // handshake protocol\r\n  INIT_PLAYER_ID: 1, // server -> client\r\n  SET_PLAYER_DATA: 2, // client -> server proxy\r\n  INIT_PLAYERS: 3, // server -> client\r\n  // server -> client\r\n  JOIN: 4,\r\n  LEAVE: 5,\r\n  // client -> server proxy\r\n  CHAT: 6,\r\n  AUDIO: 7,\r\n  AUDIO_START: 8,\r\n  AUDIO_END: 9,\r\n  VIDEO: 10,\r\n  VIDEO_START: 11,\r\n  VIDEO_END: 12,\r\n};\r\n\r\nexport const METHOD_NAMES = {};\r\nfor (const [key, value] of Object.entries(METHODS)) {\r\n  METHOD_NAMES[value] = key;\r\n}","// import {MULTIPLAYER_PORT} from './constants.mjs';\r\nimport * as u8 from 'u8-encoder';\r\n// import {UPDATE_METHODS} from './update-types.mjs';\r\n\r\n// const alignN = n => index => {\r\n//   const r = index % n;\r\n//   return r === 0 ? index : (index + n - r);\r\n// };\r\n// const align4 = alignN(4);\r\n\r\n// const parseUpdateObject = uint8Array => zbdecode(uint8Array);\r\n\r\n/* function makeid(length) {\r\n  var result = '';\r\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  var charactersLength = characters.length;\r\n  for (var i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n}\r\nconst makeId = () => makeid(10); */\r\n\r\nexport type MethodArgs = {\r\n  method: number;\r\n  args: object;\r\n};\r\n\r\nexport function parseMessage(uint8Array: Uint8Array) {\r\n  const o = u8.decode(uint8Array);\r\n  const method = o?.method;\r\n  const args = o?.args;\r\n\r\n  if (typeof method === 'number' && typeof args === 'object' && args !== null) {\r\n    return {\r\n      method,\r\n      args,\r\n    };\r\n  } else {\r\n    throw new Error('Invalid message');\r\n  }\r\n}\r\n\r\nexport function serializeMessage({\r\n  method,\r\n  args,\r\n}: MethodArgs) {\r\n  return u8.encode({\r\n    method,\r\n    args,\r\n  });\r\n}\r\n\r\n// const getEndpoint = () => {\r\n//   const wss = 'wss://';\r\n//   let hostname = 'multiplayer.webaverse.workers.dev';\r\n\r\n//   // The local development server's WebSocket is provided at ws://localhost.\r\n//   const isDevelopment = location.hostname === 'local.webaverse.com';\r\n//   if (isDevelopment) {\r\n//     // wss = 'ws://';\r\n//     // hostname = `localhost:${MULTIPLAYER_PORT}`;\r\n//     hostname = location.host;\r\n//   }\r\n\r\n//   return `${wss}${hostname}`;\r\n// };\r\n// const createWs = (endpoint, roomname, playerId) => {\r\n//   const u = `${endpoint}/api/room/${roomname}/websocket${playerId ? `?playerId=${playerId}` : ''}`;\r\n//   const ws = new WebSocket(u);\r\n//   return ws;\r\n// };\r\n\r\n// const makePromise = () => {\r\n//   let resolve;\r\n//   let reject;\r\n//   const promise = new Promise((res, rej) => {\r\n//     resolve = res;\r\n//     reject = rej;\r\n//   });\r\n//   promise.resolve = resolve;\r\n//   promise.reject = reject;\r\n//   return promise;\r\n// };\r\n\r\n// const zstringify = o => {\r\n//   let result = '';\r\n//   for (const k in o) {\r\n//     if (result) {\r\n//       result += '\\n';\r\n//     }\r\n\r\n//     const v = o[k];\r\n//     if (v instanceof Float32Array) {\r\n//       result += `${JSON.stringify(k)}: Float32Array(${v.join(',')})`;\r\n//     } else {\r\n//       const s = JSON.stringify(v);\r\n//       if (s.length >= 20 && v instanceof Object && v !== null) {\r\n//         result += `${JSON.stringify(k)}:\\n${zstringify(v)}`;\r\n//       } else {\r\n//         result += `${JSON.stringify(k)}: ${s}`;\r\n//       }\r\n//     }\r\n//   }\r\n//   return result;\r\n// };\r\n\r\n/* export {\r\n  alignN,\r\n  align4,\r\n  parseUpdateObject,\r\n  makeId,\r\n  parseMessage,\r\n  serializeMessage,\r\n  getEndpoint,\r\n  createWs,\r\n  makePromise,\r\n  zstringify,\r\n}; */\r\n","import { METHOD_NAMES } from \"./lib/methods.mjs\";\nimport { parseMessage, serializeMessage, type MethodArgs } from \"./lib/util\";\n\ntype MultiplayerApi = EventTarget & {\n  send: (methodArgs: MethodArgs) => void;\n};\n\nexport const connect = async (url: string, {\n  signal,\n}: {\n  signal?: AbortSignal,\n} = {}) => {\n  const ws = new WebSocket(url);\n\n  await new Promise((resolve, reject) => {\n    const onopen = () => {\n      resolve(null);\n    };\n    const onerror = (e) => {\n      reject(e);\n    };\n    const onclose = () => {\n      reject(new Error('WebSocket closed'));\n    };\n\n    ws.addEventListener('open', onopen);\n    ws.addEventListener('error', onerror);\n    ws.addEventListener('close', onclose);\n  });\n\n  if (signal?.aborted) {\n    throw new Error('Connection aborted');\n  }\n\n  const result = new EventTarget() as MultiplayerApi;\n  result.send = ({\n    method,\n    args,\n  }: MethodArgs) => {\n    ws.send(serializeMessage({method, args}));\n  };\n\n  ws.addEventListener('message', (e) => {\n    const {method, args} = parseMessage(e.data);\n    const methodName = METHOD_NAMES[method];\n    if (methodName) {\n      result.dispatchEvent(new MessageEvent(methodName, {data: args}));\n    } else {\n      throw new Error(`Unknown method: ${method}`);\n    }\n  });\n  ws.addEventListener('error', (e) => {\n    result.dispatchEvent(new MessageEvent('error', {data: e}));\n  });\n  ws.addEventListener('close', () => {\n    result.dispatchEvent(new MessageEvent('close'));\n  });\n\n  return result;\n};\n"],"mappings":";AAAO,IAAM,UAAU;AAAA;AAAA,EAErB,gBAAgB;AAAA;AAAA,EAChB,iBAAiB;AAAA;AAAA,EACjB,cAAc;AAAA;AAAA;AAAA,EAEd,MAAM;AAAA,EACN,OAAO;AAAA;AAAA,EAEP,MAAM;AAAA,EACN,OAAO;AAAA,EACP,aAAa;AAAA,EACb,WAAW;AAAA,EACX,OAAO;AAAA,EACP,aAAa;AAAA,EACb,WAAW;AACb;AAEO,IAAM,eAAe,CAAC;AAC7B,WAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,OAAO,GAAG;AAClD,eAAa,KAAK,IAAI;AACxB;;;ACpBA,YAAY,QAAQ;AA2Bb,SAAS,aAAa,YAAwB;AACnD,QAAM,IAAO,UAAO,UAAU;AAC9B,QAAM,SAAS,uBAAG;AAClB,QAAM,OAAO,uBAAG;AAEhB,MAAI,OAAO,WAAW,YAAY,OAAO,SAAS,YAAY,SAAS,MAAM;AAC3E,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF,OAAO;AACL,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AACF;AAEO,SAAS,iBAAiB;AAAA,EAC/B;AAAA,EACA;AACF,GAAe;AACb,SAAU,UAAO;AAAA,IACf;AAAA,IACA;AAAA,EACF,CAAC;AACH;;;AC5CO,IAAM,UAAU,OAAO,KAAa;AAAA,EACzC;AACF,IAEI,CAAC,MAAM;AACT,QAAM,KAAK,IAAI,UAAU,GAAG;AAE5B,QAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AACrC,UAAM,SAAS,MAAM;AACnB,cAAQ,IAAI;AAAA,IACd;AACA,UAAM,UAAU,CAAC,MAAM;AACrB,aAAO,CAAC;AAAA,IACV;AACA,UAAM,UAAU,MAAM;AACpB,aAAO,IAAI,MAAM,kBAAkB,CAAC;AAAA,IACtC;AAEA,OAAG,iBAAiB,QAAQ,MAAM;AAClC,OAAG,iBAAiB,SAAS,OAAO;AACpC,OAAG,iBAAiB,SAAS,OAAO;AAAA,EACtC,CAAC;AAED,MAAI,iCAAQ,SAAS;AACnB,UAAM,IAAI,MAAM,oBAAoB;AAAA,EACtC;AAEA,QAAM,SAAS,IAAI,YAAY;AAC/B,SAAO,OAAO,CAAC;AAAA,IACb;AAAA,IACA;AAAA,EACF,MAAkB;AAChB,OAAG,KAAK,iBAAiB,EAAC,QAAQ,KAAI,CAAC,CAAC;AAAA,EAC1C;AAEA,KAAG,iBAAiB,WAAW,CAAC,MAAM;AACpC,UAAM,EAAC,QAAQ,KAAI,IAAI,aAAa,EAAE,IAAI;AAC1C,UAAM,aAAa,aAAa,MAAM;AACtC,QAAI,YAAY;AACd,aAAO,cAAc,IAAI,aAAa,YAAY,EAAC,MAAM,KAAI,CAAC,CAAC;AAAA,IACjE,OAAO;AACL,YAAM,IAAI,MAAM,mBAAmB,MAAM,EAAE;AAAA,IAC7C;AAAA,EACF,CAAC;AACD,KAAG,iBAAiB,SAAS,CAAC,MAAM;AAClC,WAAO,cAAc,IAAI,aAAa,SAAS,EAAC,MAAM,EAAC,CAAC,CAAC;AAAA,EAC3D,CAAC;AACD,KAAG,iBAAiB,SAAS,MAAM;AACjC,WAAO,cAAc,IAAI,aAAa,OAAO,CAAC;AAAA,EAChD,CAAC;AAED,SAAO;AACT;","names":[]}